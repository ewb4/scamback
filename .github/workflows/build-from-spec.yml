name: Build RPM from spec file

on:
  push:
  
  # Allows you to run this workflow manually from the Actions tab
  ## but it only appears to be a valid option when the workflow is on the main/master brance
  workflow_dispatch:
    inputs:
      spec_file:
        description: "Path to the .spec file"
        required: true
        default: 'contrib/rhel/7/SPECS/*.spec'
        type: string
      additional_repos:
        description: "List of additional repos as JSON array"
        type: string
      output_dl_artifacts:
        description: "Add any downloaded artifacts to artifact_array"
        required: true
        default: false
        type: boolean
      verbose:
        description: "Mark verbose option for commands run inside action"
        required: true
        default: false
        type: boolean
      rpm_debug_package:
        description: "Produce debug_package RPMs"
        required: true
        default: true
        type: boolean
      rpm_debugsource_template:
        description: "Produce _debugsource_template RPMs"
        required: true
        default: true
        type: boolean
      who_to_greet:
        description: "Name to greet"
        required: true
        default: "Rose"
        type: string

jobs:
  build:
    name: Build RPM
    permissions:
      contents: write
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: set variable
        id: set_step
        run: |
          echo "# Environment finding spec"
          env | grep -i spec
          if [ -z "${SPEC_FILE}" ] ; then
            if [[ -n "${{ inputs.spec_file }}" ]]; then
              echo "spec_file=${{ inputs.spec_file }}" | tee -a "$GITHUB_OUTPUT"
            else
            # do more here to better determine the spec file if there are...
            ## multiple directories in standard structure
            ## one spec file (even if not matching the build environment dist version)  
            SPEC_FILE=$(find . -name "*.spec" | head -1 | sed 's#./##')
              echo "spec_file=${SPEC_FILE}" | tee -a "$GITHUB_OUTPUT"
            fi
          fi

      - name: set additional repo
        id: set_repo
        run: |
          ## This is most definately a hack... if the input is optional and empty, then it should remain empty
          ##   however this build needs "powertools"
          if [ -z "${{ inputs.additional_repos }}" ] ; then
            # parse with https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse
            # build with the following:
                ## $ printf "%s\n%s\n" "powertools" "powerpoles" | jq -R -s -c 'split("\n") | map(select(length>0))'
            echo 'additional_repos=["powertools"]' | tee -a "$GITHUB_OUTPUT"
          else
            echo "additional_repos=${{ inputs.additional_repos }}" | tee -a "$GITHUB_OUTPUT"
          fi

      - name: List
        run: |
          echo "::group::List env vars"
          env | sort
          echo "::endgroup::"
          echo "::group::Announce SPEC filename"
          echo "Deploying build ${{ steps.set_step.outputs.spec_file }}"
          echo "::endgroup::"
          echo "::group::working directory (pwd)"
          pwd
          echo "::endgroup::"
          echo "::group::Recursive list files from working directory"
          ls -lR
          echo "::endgroup::"

      - name: Validate
        id: validate
        run: |
          echo "::group::Environment"
          env | sort
          echo "::endgroup::"
          echo "::group::working directory (pwd)"
          pwd
          echo "::endgroup::"
          echo "::group::listing all files"
          ls -lR
          echo "::endgroup::"

      # Change @main to a specific commit SHA or version tag, e.g.:
      # actions/hello-world-docker-action@e76147da8e5c81eaf017dede5645551d4b94427b
      # actions/hello-world-docker-action@v1.2.3
      - name: Build RPM in Docker Action
        id: build-rhel-8
        uses: EWBr0wn/hello-world-docker-action@rockylinux-dev
        with:
          spec_file: ${{ steps.set_step.outputs.spec_file }}
          additional_repos: ${{ steps.set_repo.outputs.additional_repos }}
          output_dl_artifacts: true
          verbose: true
          rpm_debug_package: true
          rpm_debugsource_template: true
          # https://docs.github.com/en/actions/learn-github-actions/expressions#example
          who_to_greet: ${{ github.event_name == 'workflow_dispatch' && inputs.who_to_greet || format('One called {0}', github.event_name) }}

      - name: Echo
        id: echoer
        run: |
          echo "::group::Gazintas from build-rhel-8"
          echo "Content-type: ${{ steps.build-rhel-8.outputs.rpm_content_type }}"
          echo "RPM(s): '${{ steps.build-rhel-8.outputs.built_rpm_array }}'"
          echo "SRPM: '${{ steps.build-rhel-8.outputs.built_srpm_array }}'"
          echo "artifact_array: '${{ steps.build-rhel-8.outputs.artifact_array }}'"
          NVR=$(echo '${{ steps.build-rhel-8.outputs.artifact_array }}' | jq -r '.[] | .NVR')
          echo "NVR=${NVR}" | tee -a "$GITHUB_OUTPUT"
          for r in ${{ join(fromJSON(steps.build-rhel-8.outputs.built_rpm_array), ' ') }} ; do
            ls -l ${r}
          done
          for s in ${{ join(fromJSON(steps.build-rhel-8.outputs.built_srpm_array), ' ') }} ; do
            ls -l ${s}
          done
          echo ${{ join(fromJSON(steps.build-rhel-8.outputs.built_rpm_array), ' ') }}
          echo ${{ join(fromJSON(steps.build-rhel-8.outputs.built_srpm_array), '
          ') }}
          echo "::endgroup::"
          echo "::group::Artifact Array"
          echo '${{ steps.build-rhel-8.outputs.artifact_array }}' | jq .
          echo "::endgroup::"
          echo "::group::List output directory"
          ls -laR output
          echo "::endgroup::"
          #printf "%s\n" "${NVR}"                                          > output/ReleaseDescription.md
          printf "<details>\n\n"                                          > output/ReleaseDescription.md
          fstr='| %-20s | %-64s |\n'
          TMPFILE=$(mktemp -q /tmp/.artifact-json-by-dist.XXXXXX)
          #create list of all distributions from JSON
          dists=$(echo '${{ steps.build-rhel-8.outputs.artifact_array }}' | jq -r '.[] | .artifactsets[] | .Dist')
          for dist in ${dists} ; do
            printf "<summary>%s</summary>\n\n" "${dist}"                 >> output/ReleaseDescription.md
            echo '${{ steps.build-rhel-8.outputs.artifact_array }}' | jq --arg d "${dist}" '.[] | .artifactsets[] | select(.Dist == $d)' > ${TMPFILE}
            # get the RPMs
            printf "<details>\n\n"                                       >> output/ReleaseDescription.md
            printf "<summary>RPMs</summary>\n\n"                         >> output/ReleaseDescription.md
            for f in $(cat ${TMPFILE} | jq -c '.Artifacts[] | select(.Type == "x86_64") | select(.Name | test("-debugsource-|-debuginfo-") | not)') ; do
              #each line is a JSON artifact block
              eval "$(echo "${f}" | jq -r '@sh "Name=\(.Name) Size=\(.Size) MD5=\(.MD5) SHA256=\(.SHA256) sse=\(.ModifiedSSE)"')"
              tstamp=$(TZ=UTC date --date="@${sse}")
              printf "${fstr}" "Label" "Value"
              printf "${fstr}" "-" "-" | tr ' ' '-'
              printf "${fstr}" "Name:" "${Name}"
              printf "${fstr}" "Size:" "${Size}"
              printf "${fstr}" "TimeStamp:" "${tstamp} (${sse})"
              printf "${fstr}" "MD5:" "${MD5}"
              printf "${fstr}" "SHA256:" "${SHA256}"
              printf "\n"
            done                                                         >> output/ReleaseDescription.md
            # get the debugs
            ## find a way to check to see if debugsource and debuginfo packages were even asked for
            count=$(cat ${TMPFILE} | jq -c '[ .Artifacts[] | select(.Type == "x86_64") | select(.Name | test("-debugsource-|-debuginfo-")) | length ] | add')
            if [ ${count} -gt 0 ] ; then
              printf "<details>\n\n"                                     >> output/ReleaseDescription.md
              printf "<summary>Debuginfo and Debugsource</summary>\n\n"  >> output/ReleaseDescription.md
              for f in $(cat ${TMPFILE} | jq -c '.Artifacts[] | select(.Type == "x86_64") | select(.Name | test("-debugsource-|-debuginfo-"))') ; do
                #each line is a JSON artifact block
                eval "$(echo "${f}" | jq -r '@sh "Name=\(.Name) Size=\(.Size) MD5=\(.MD5) SHA256=\(.SHA256) sse=\(.ModifiedSSE)"')"
                tstamp=$(TZ=UTC date --date="@${sse}")
                printf "${fstr}" "Label" "Value"                         >> output/ReleaseDescription.md
                printf "${fstr}" "-" "-" | tr ' ' '-'                    >> output/ReleaseDescription.md
                printf "${fstr}" "Name:" "${Name}"                       >> output/ReleaseDescription.md
                printf "${fstr}" "Size:" "${Size}"                       >> output/ReleaseDescription.md
                printf "${fstr}" "TimeStamp:" "${tstamp} (${sse})"       >> output/ReleaseDescription.md
                printf "${fstr}" "MD5:" "${MD5}"                         >> output/ReleaseDescription.md
                printf "${fstr}" "SHA256:" "${SHA256}"                   >> output/ReleaseDescription.md
                printf "\n"                                              >> output/ReleaseDescription.md
              done
              printf "</details>\n\n"                                    >> output/ReleaseDescription.md
            fi
            printf "</details>\n\n"                                      >> output/ReleaseDescription.md
            # get the SRPMs
            printf "<details>\n\n"                                       >> output/ReleaseDescription.md
            printf "<summary>SRPMs</summary>\n\n"                        >> output/ReleaseDescription.md
            for f in $(cat ${TMPFILE} | jq -c '.Artifacts[] | select(.Type == "srpm")') ; do
              #each line is a JSON artifact block
              eval "$(echo "${f}" | jq -r '@sh "Name=\(.Name) Size=\(.Size) MD5=\(.MD5) SHA256=\(.SHA256) sse=\(.ModifiedSSE)"')"
              tstamp=$(TZ=UTC date --date="@${sse}")
              printf "${fstr}" "Label" "Value"                           >> output/ReleaseDescription.md
              printf "${fstr}" "-" "-" | tr ' ' '-'                      >> output/ReleaseDescription.md
              printf "${fstr}" "Name:" "${Name}"                         >> output/ReleaseDescription.md
              printf "${fstr}" "Size:" "${Size}"                         >> output/ReleaseDescription.md
              printf "${fstr}" "TimeStamp:" "${tstamp} (${sse})"         >> output/ReleaseDescription.md
              printf "${fstr}" "MD5:" "${MD5}"                           >> output/ReleaseDescription.md
              printf "${fstr}" "SHA256:" "${SHA256}"                     >> output/ReleaseDescription.md
              printf "\n"                                                >> output/ReleaseDescription.md
            done
            printf "</details>\n\n"                                      >> output/ReleaseDescription.md
            # get the downloaded files if there are any
            count=$(cat ${TMPFILE} | jq -c '.Artifacts[] | select(.Type == "dlsrc") | length')
            if [ ${count} -gt 0 ] ; then
              # this is not going to work when consolidating multiple distributions  
              echo "srcincluded=true" | tee -a "$GITHUB_OUTPUT" 
              src_array=$(echo '${{ steps.build-rhel-8.outputs.artifact_array }}' | jq -c '[.[] | .artifactsets[] | .Artifacts[] | select(.Type =="dlsrc") | .FullPath] | unique')
              echo "src_array=${src_array}" | tee -a "$GITHUB_OUTPUT" 
              printf "<details>\n\n"                                     >> output/ReleaseDescription.md
              printf "<summary>Downloaded source files</summary>\n\n"    >> output/ReleaseDescription.md
              for f in $(cat ${TMPFILE} | jq -c '.Artifacts[] | select(.Type == "dlsrc")') ; do
                #each line is a JSON artifact block
                eval "$(echo "${f}" | jq -r '@sh "Name=\(.Name) Size=\(.Size) MD5=\(.MD5) SHA256=\(.SHA256) sse=\(.ModifiedSSE)"')"
                tstamp=$(TZ=UTC date --date="@${sse}")
                printf "${fstr}" "Label" "Value"                         >> output/ReleaseDescription.md
                printf "${fstr}" "-" "-" | tr ' ' '-'                    >> output/ReleaseDescription.md
                printf "${fstr}" "Name:" "${Name}"                       >> output/ReleaseDescription.md
                printf "${fstr}" "Size:" "${Size}"                       >> output/ReleaseDescription.md
                printf "${fstr}" "TimeStamp:" "${tstamp} (${sse})"       >> output/ReleaseDescription.md
                printf "${fstr}" "MD5:" "${MD5}"                         >> output/ReleaseDescription.md
                printf "${fstr}" "SHA256:" "${SHA256}"                   >> output/ReleaseDescription.md
                printf "\n"                                              >> output/ReleaseDescription.md
              done
              printf "</details>\n\n"                                    >> output/ReleaseDescription.md
            fi
            printf "</details>\n\n"                                      >> output/ReleaseDescription.md
          done
          printf "\`\`\`json\n"                                          >> output/ReleaseDescription.md
          echo '${{ steps.build-rhel-8.outputs.artifact_array }}' | jq . >> output/ReleaseDescription.md
          printf "\`\`\`\n"                                              >> output/ReleaseDescription.md
          echo "::group::List output JSON file contents"
          ls -lh output/ReleaseDescription.md
          cat output/ReleaseDescription.md | nl -ba
          echo "::endgroup::"

      - name: Release
        if: true
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.echoer.outputs.NVR }}
          draft: true
          body_path: output/ReleaseDescription.md
          files: |-
            ${{ join(fromJSON(steps.build-rhel-8.outputs.built_rpm_array), '
            ')}}
            ${{ join(fromJSON(steps.build-rhel-8.outputs.built_srpm_array), '
            ')}}
            ${{ join(fromJSON(steps.echoer.outputs.src_array), '
            ')}}